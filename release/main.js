(function (exports) {
'use strict';

function __(tag, block) {
  block.tag = tag;
  return block;
}


/* No side effect */

// Generated by BUCKLESCRIPT VERSION 1.7.4, PLEASE EDIT WITH CARE
function endpoint(line) {
  return /* tuple */[
          line[/* x */0] + line[/* length */3] * Math.cos(line[/* angle */2]),
          -(-line[/* y */1] + line[/* length */3] * Math.sin(line[/* angle */2]))
        ];
}

function create_branches(p, line) {
  var match = endpoint(line);
  var y = match[1];
  var x = match[0];
  var left = /* float array */[
    x,
    y,
    Math.PI * (line[/* angle */2] / Math.PI + p[/* left_angle */0]),
    line[/* length */3] * p[/* shrink_factor */2],
    line[/* width */4] * p[/* shrink_factor */2]
  ];
  var right = /* float array */[
    x,
    y,
    Math.PI * (line[/* angle */2] / Math.PI - p[/* left_angle */0]),
    line[/* length */3] * p[/* shrink_factor */2],
    line[/* width */4] * p[/* shrink_factor */2]
  ];
  return /* tuple */[
          left,
          right
        ];
}

function create_tree(depth, p, line) {
  if (depth < 0) {
    return /* Leaf */__(0, [line]);
  } else {
    var match = create_branches(p, line);
    var left = create_tree(depth - 1 | 0, p, match[0]);
    var right = create_tree(depth - 1 | 0, p, match[1]);
    return /* Node */__(1, [
              line,
              left,
              right
            ]);
  }
}

function draw_line(context, line) {
  var match = endpoint(line);
  context.beginPath();
  context.moveTo(line[/* x */0], line[/* y */1]);
  context.lineTo(match[0], match[1]);
  context.stroke();
  return /* () */0;
}

function draw_tree(context, _param) {
  while(true) {
    var param = _param;
    if (param.tag) {
      draw_line(context, param[0]);
      draw_tree(context, param[1]);
      _param = param[2];
      continue ;
      
    } else {
      return draw_line(context, param[0]);
    }
  }
}

var canvas = document.getElementById("canvas");

var context = canvas.getContext("2d");

var trunk = /* float array */[
  300.0,
  600.0,
  Math.PI / 2.0,
  100.0,
  4.0
];

var tree = create_tree(10, /* float array */[
      0.1,
      0.1,
      0.8
    ], trunk);

draw_tree(context, tree);


/* canvas Not a pure module */

exports.endpoint = endpoint;
exports.create_branches = create_branches;
exports.create_tree = create_tree;
exports.draw_line = draw_line;
exports.draw_tree = draw_tree;

}((this.gol = this.gol || {})));
